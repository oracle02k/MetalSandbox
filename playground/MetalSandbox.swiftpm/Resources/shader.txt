#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

enum VertexInputIndex {
    VertexInputIndexVertices1    = 0,
    VertexInputIndexVertices2,
    VertexInputIndexVertices3,
    VertexInputIndexVertices4,
    VertexInputIndexViewport,
};

struct Viewport {
    simd_float2 leftTop;
    simd_float2 rightBottom;
};

struct VertexIn {
    simd_float3 position;
    simd_float4 color;
    simd_float2 texCoord;
};

struct VertexOut {
    simd_float4 position [[ position ]];
    simd_float4 pos;
    simd_float4 color;
    simd_float2 texCoord;
};

vertex VertexOut simple2d_vertex_function(
    const device VertexIn *vertices [[ buffer(VertexInputIndexVertices1) ]],
    const device Viewport *viewport [[ buffer(VertexInputIndexViewport) ]],
    uint vertexID [[ vertex_id  ]]
) {
    simd_float2 viewportSize = viewport->rightBottom - viewport->leftTop;
    
    simd_float2 pixelSpacePos = vertices[vertexID].position.xy;
    simd_float2 position = 2 * (pixelSpacePos - viewport->leftTop)/viewportSize - 1.0; // 2(x - sx)/w - 1.0
    position.y *= - 1;
    
    VertexOut vOut;
    vOut.position = float4(position, vertices[vertexID].position.z,1);
    vOut.color = vertices[vertexID].color;

    return vOut;
}

fragment simd_float4 simple2d_fragment_function(VertexOut vIn [[ stage_in ]]) {
    return vIn.color;
}

fragment simd_float4 red_fragment_function(VertexOut vIn [[ stage_in ]]) {
    return simd_float4(1,0,0,1);
}

vertex VertexOut texcoord_vertex_function(
    const device VertexIn *vertices [[ buffer(0) ]],
    uint vertexID [[ vertex_id  ]]
) {
    VertexOut vOut;
    vOut.position = simd_float4(vertices[vertexID].position,1);
    vOut.pos = vOut.position;
    vOut.color = vertices[vertexID].color;
    vOut.texCoord = vertices[vertexID].texCoord;

    return vOut;
}



fragment simd_float4 texcoord_fragment_function(
    VertexOut vIn [[ stage_in ]],
    texture2d<float> colorTexture [[texture(0)]]
) {
    constexpr sampler colorSampler(mip_filter::nearest, mag_filter::nearest, min_filter::nearest);
    simd_float4 color = colorTexture.sample(colorSampler, vIn.texCoord);
    return simd_float4(color.rgb,1);
}

fragment simd_float4 raster_order_group0_fragment(
    VertexOut vIn [[ stage_in ]],
    texture2d<float> colorTexture [[texture(0)]],
    texture2d<float, metal::access::write> writeTexture [[texture(1), raster_order_group(0)]]
) {
    constexpr sampler colorSampler(mip_filter::linear, mag_filter::linear, min_filter::linear);
    simd_float4 color = colorTexture.sample(colorSampler, vIn.texCoord);
    color = simd_float4(color.rgb,  vIn.color.w);
    
    float vx = (vIn.pos.x + 1.0)/2.f;
    float vy = 1.f - (vIn.pos.y + 1.0)/2.f;
    uint2 coord = uint2(vx * 760, vy * 760);
    
    float4 color2 = float4(vx,vy,0,1);
    writeTexture.write(color, coord);
    
    return color;
}

fragment simd_float4 raster_order_group1_fragment(
  VertexOut vIn [[ stage_in ]],
  texture2d<float> colorTexture [[texture(0)]],
  texture2d<float, metal::access::write> writeTexture [[texture(1), raster_order_group(1)]]
) {
    constexpr sampler colorSampler(mip_filter::linear, mag_filter::linear, min_filter::linear);
    simd_float4 color = colorTexture.sample(colorSampler, vIn.texCoord);
    color = simd_float4(color.rgb,  vIn.color.w);
    
    float vx = (vIn.pos.x + 1.0)/2.f;
    float vy = 1.f - (vIn.pos.y + 1.0)/2.f;
    uint2 coord = uint2(vx * 760, vy * 760);
    
    float4 color2 = float4(vx,vy,0,1);
    writeTexture.write(color, coord);
    
    return color;
}

 kernel void add_arrays_compute_function(
    device const float* inA,
    device const float* inB,
    device float* result,
    uint index [[thread_position_in_grid]]
) {
    // the for-loop is replaced with a collection of threads, each of which
    // calls this function.
    result[index] = inA[index] + inB[index];
}

namespace IndirectRenderer {
// Vertex shader outputs and per-fragment inputs
struct RasterizerData
{
    float4 position [[position]];
    float2 tex_coord;
};

struct Vertex {
    packed_float2 position;
    packed_float2 texcoord;
};

// Structure defining the layout of variable changing once (or less) per frame
struct FrameState {
    simd_float2 aspectScale;
};

// Structure defining parameters for each rendered object
struct ObjectPerameters {
    packed_float2 position;
};

// Buffer index values shared between the vertex shader and C code
enum VertexBufferIndex {
    VertexBufferIndexVertices = 0,
    VertexBufferIndexObjectParams,
    VertexBufferIndexFrameState,
};

// Buffer index values shared between the compute kernel and C code
enum KernelBufferIndex {
    KernelBufferIndexFrameState = 0,
    KernelBufferIndexObjectParams,
    KernelBufferIndexArguments,
};

enum ArgumentBufferBufferID {
    ArgumentBufferBufferIDCommandBuffer = 0,
    ArgumentBufferBufferIDObjectMesh,
};

vertex RasterizerData vertexShader(
                                   uint                         vertexID      [[ vertex_id ]],
                                   uint                         objectIndex   [[ instance_id ]],
                                   const device Vertex *    vertices      [[ buffer(VertexBufferIndexVertices) ]],
                                   const device ObjectPerameters* object_params [[ buffer(VertexBufferIndexObjectParams) ]],
                                   constant FrameState *    frame_state   [[ buffer(VertexBufferIndexFrameState) ]]
                                   ) {
    const float ViewScale = 0.05;    // Scale of each object when drawn
    RasterizerData out;
    
    float2 worldObjectPostion  = object_params[objectIndex].position;
    float2 modelVertexPosition = vertices[vertexID].position;
    float2 worldVertexPosition = modelVertexPosition + worldObjectPostion;
    float2 clipVertexPosition  = frame_state->aspectScale * ViewScale * worldVertexPosition;
    
    out.position = float4(clipVertexPosition.x, clipVertexPosition.y, 0, 1);
    out.tex_coord = float2(vertices[vertexID].texcoord);
    
    return out;
}

vertex RasterizerData vertexShader2(
   uint                     vertexID      [[ vertex_id ]],
   const device Vertex *    vertices      [[ buffer(VertexBufferIndexVertices) ]],
   const device ObjectPerameters* object_params [[ buffer(VertexBufferIndexObjectParams) ]],
   constant FrameState *    frame_state   [[ buffer(VertexBufferIndexFrameState) ]]
) {
    const float ViewScale = 0.1;    // Scale of each object when drawn
    RasterizerData out;
    
    float2 worldObjectPostion  = object_params->position;
    float2 modelVertexPosition = vertices[vertexID].position;
    float2 worldVertexPosition = modelVertexPosition + worldObjectPostion;
    float2 clipVertexPosition  = frame_state->aspectScale * ViewScale * worldVertexPosition;
    
    out.position = float4(clipVertexPosition.x, clipVertexPosition.y, 0, 1);
    out.tex_coord = float2(vertices[vertexID].texcoord);
    
    return out;
}

fragment float4 fragmentShader(RasterizerData in [[ stage_in ]])
{
    float4 output_color = float4(in.tex_coord.x, in.tex_coord.y, 0, 1);
    
    return output_color;
}
}

namespace TileRenderer {
// `[MTLRenderCommandEncoder setVertexBuffer:offset:atIndex]` requires that buffer offsets be
// 256 bytes aligned for buffers using the constant address space and 16 bytes aligned for buffers
// using the device address space. The sample uses the device address space for the `actorParams`
// parameter of the shaders and uses the `set[Vertex|Framgment:offset:` methods to iterate
// through `ActorParams` structures. So it aligns each element of `_actorParamsBuffers` by 16 bytes.
#define BufferOffsetAlign 16

// Buffer index values shared between the shader and C code to ensure that the Metal shader buffer inputs match
// the Metal API buffer set calls.
typedef enum AAPLBufferIndices
{
    AAPLBufferIndexVertices         = 1,
    AAPLBufferIndexActorParams      = 2,
    AAPLBufferIndexCameraParams     = 3
} AAPLBufferIndices;

// RenderTarget index values shared between the shader and C code to ensure that the Metal shader render target
// index matches the Metal API pipeline and render pass.
typedef enum AAPLRenderTargetIndices
{
    AAPLRenderTargetColor           = 0,
} AAPLRenderTargetIndices;

// Structures shared between the shader and C code to ensure that the layout of per frame data
// accessed in Metal shaders matches the layout of the data set in C code.
// Data constant across all threads, vertices, and fragments.

typedef struct __attribute__((aligned(BufferOffsetAlign)))
{
    matrix_float4x4 modelMatrix;
    vector_float4   color;
} ActorParams;

typedef struct
{
    vector_float4 position;
} Vertex;

typedef struct
{
    vector_float3   cameraPos;
    matrix_float4x4 viewProjectionMatrix;
} CameraParams;

typedef struct
{
    float4  position   [[position]];
    half3   worldNormal;
} ColorInOut;

/// A vertex function that generates a full-screen quad pass.
vertex ColorInOut quadPassVertex(uint vid[[vertex_id]])
{
    ColorInOut out;
    
    float4 position;
    position.x = (vid == 2) ? 3.0 : -1.0;
    position.y = (vid == 0) ? -3.0 : 1.0;
    position.zw = 1.0;
    
    out.position = position;
    return out;
}

vertex ColorInOut forwardVertex
 (
  uint                      vid          [[vertex_id]],
  device const Vertex      *vertices     [[buffer(AAPLBufferIndexVertices)]],
  device const ActorParams &actorParams  [[buffer(AAPLBufferIndexActorParams)]],
  constant CameraParams    &cameraParams [[buffer(AAPLBufferIndexCameraParams)]]
  )
{
    ColorInOut out;
   out.position = (cameraParams.viewProjectionMatrix * actorParams.modelMatrix * float4(vertices[vid].position.xyz, 1.0f));
    return out;
}

fragment half4 processOpaqueFragment
 (
  ColorInOut                in          [[stage_in]],
  device const ActorParams &actorParams [[buffer(AAPLBufferIndexActorParams)]]
  )
{
    half4 out;
    out = half4(actorParams.color);
    return out;
}

/// The number of transparent geometry layers that the app stores in image block memory.
/// Each layer consumes tile memory and increases the value of the pipeline's `imageBlockSampleLength` property.
static constexpr constant short kNumLayers = 4;

/// Stores color and depth values of transparent fragments.
/// The `processTransparentFragment` shader adds color values from transparent geometries in
/// ascending depth order.
/// Then, the `blendFragments` shader blends the color values for each fragment in descending
/// depth order after the app draws all the transparent geometry.
struct TransparentFragmentValues
{
    // Store the color of the transparent fragment.
    // Use a packed data type to reduce the size of the explicit ImageBlock.
    rgba8unorm<half4> colors [[raster_order_group(0)]] [kNumLayers];
    
    // An array of transparent fragment distances from the camera.
    half depths              [[raster_order_group(0)]] [kNumLayers];
};

/// Stores the color values for multiple fragments in image block memory.
/// The `[[imageblock_data]]` attribute tells Metal to store `values` in the GPU's
/// image block memory, which preserves its data for an entire render pass.
struct TransparentFragmentStore
{
    TransparentFragmentValues values [[imageblock_data]];
}; 

/// Initializes an image block structure to sentinel values.
kernel void initTransparentFragmentStore
 (
  imageblock<TransparentFragmentValues, imageblock_layout_explicit> blockData,
  ushort2 localThreadID[[thread_position_in_threadgroup]]
  )
{
    threadgroup_imageblock TransparentFragmentValues* fragmentValues = blockData.data(localThreadID);
    for (short i = 0; i < kNumLayers; ++i)
    {
        fragmentValues->colors[i] = half4(0.0h);
        fragmentValues->depths[i] = half(INFINITY);
    }
    
}

/// Adds transparent fragments into an image block structure in depth order.
fragment TransparentFragmentStore processTransparentFragment
 (
  ColorInOut                 in             [[stage_in]],
  device const ActorParams  &actorParams    [[buffer(AAPLBufferIndexActorParams)]],
  TransparentFragmentValues  fragmentValues [[imageblock_data]]
  )
{
    TransparentFragmentStore out;
    half4 finalColor = half4(actorParams.color);
    finalColor.xyz *= finalColor.w;
    
    // Get the fragment distance from the camera.
    half depth = in.position.z / in.position.w;
    
    // Insert the transparent fragment values in order of depth, discarding
    // the farthest fragments after the `colors` and `depths` are full.
    for (short i = 0; i < kNumLayers; ++i)
    {
        half layerDepth = fragmentValues.depths[i];
        half4 layerColor = fragmentValues.colors[i];
        
        bool insert = (depth <= layerDepth);
        fragmentValues.colors[i] = insert ? finalColor : layerColor;
        fragmentValues.depths[i] = insert ? depth : layerDepth;
        
        finalColor = insert ? layerColor : finalColor;
        depth = insert ? layerDepth : depth;
    }
    out.values = fragmentValues;
    
    return out;
}

/// Blends the opaque fragment in the color attachment with the transparent fragments in the image block
/// structures.
///
/// This shader runs after `processTransparentFragment` inserts the transparent fragments in order of depth from back to front.
fragment half4 blendFragments
 (
  TransparentFragmentValues fragmentValues     [[imageblock_data]],
  half4                     forwardOpaqueColor [[color(AAPLRenderTargetColor), raster_order_group(0)]]
  )
{
    half4 out;
    
    // Start with the opaque fragment from the color attachment.
    out.xyz = forwardOpaqueColor.xyz;
    
    // Blend the transparent fragments in the image block from the back to front,
    // which is equivalent to the farthest layer moving toward the nearest layer.
    for (short i = kNumLayers - 1; i >= 0; --i)
    {
        half4 layerColor = fragmentValues.colors[i];
        out.xyz = layerColor.xyz + (1.0h - layerColor.w) * out.xyz;
    }
    
    out.w = 1.0;
    
    return out;
}
}
