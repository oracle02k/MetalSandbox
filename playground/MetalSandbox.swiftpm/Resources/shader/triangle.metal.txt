namespace triangle{

struct Viewport {
    float2 leftTop;
    float2 rightBottom;
};

struct VertexOut {
    float4 position [[ position ]];
    float4 color;
};

struct VertexIn {
  float3 position [[ attribute(0) ]];  // 修正: packed_float4 → float4
  float4 color [[ attribute(1) ]];     // 修正: packed_float4 → float4
};

vertex VertexOut vertex_shader(
  VertexIn v[[stage_in]],
  const device Viewport *viewport [[ buffer(BufferIndex_Viewport) ]]
) {
    float2 viewportSize = viewport->rightBottom - viewport->leftTop;
    
    float2 pixelSpacePos = v.position.xy;
    float2 ndcPos = 2 * (pixelSpacePos - viewport->leftTop) / viewportSize - 1.0;
    ndcPos.y *= -1;

    VertexOut vOut;
    vOut.position = float4(ndcPos, v.position.z, 1.0f);
    vOut.color = v.color;
    
    return vOut;
}

fragment float4 fragment_shader(VertexOut vIn [[ stage_in ]]) {
    return vIn.color;
}

}
