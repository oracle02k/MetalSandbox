namespace tile {

// `[MTLRenderCommandEncoder setVertexBuffer:offset:atIndex]` requires that
// buffer offsets be 256 bytes aligned for buffers using the constant address
// space and 16 bytes aligned for buffers using the device address space. The
// sample uses the device address space for the `actorParams` parameter of the
// shaders and uses the `set[Vertex|Framgment:offset:` methods to iterate
// through `ActorParams` structures. So it aligns each element of
// `_actorParamsBuffers` by 16 bytes.
#define BufferOffsetAlign 16

// Buffer index values shared between the shader and C code to ensure that the
// Metal shader buffer inputs match the Metal API buffer set calls.
typedef enum AAPLBufferIndices {
    AAPLBufferIndexVertices = 1,
    AAPLBufferIndexActorParams = 2,
    AAPLBufferIndexCameraParams = 3
} AAPLBufferIndices;
// RenderTarget index values shared between the shader and C code to ensure that
// the Metal shader render target index matches the Metal API pipeline and
// render pass.
typedef enum AAPLRenderTargetIndices {
    AAPLRenderTargetColor = 0,
} AAPLRenderTargetIndices;

// Structures shared between the shader and C code to ensure that the layout of
// per frame data accessed in Metal shaders matches the layout of the data set
// in C code. Data constant across all threads, vertices, and fragments.

typedef struct __attribute__((aligned(BufferOffsetAlign))) {
    matrix_float4x4 modelMatrix;
    vector_float4 color;
} ActorParams;

typedef struct {
    vector_float4 position;
} Vertex;

typedef struct {
    vector_float3 cameraPos;
    matrix_float4x4 viewProjectionMatrix;
} CameraParams;

typedef struct {
    float4 position [[position]];
    half3 worldNormal;
} ColorInOut;

vertex ColorInOut forward_vertex(
    uint vid [[vertex_id]], device const Vertex *vertices [[buffer(AAPLBufferIndexVertices)]],
    device const ActorParams &actorParams [[buffer(AAPLBufferIndexActorParams)]],
    constant CameraParams &cameraParams [[buffer(AAPLBufferIndexCameraParams)]]
) {
    ColorInOut out;
    out.position =
        (cameraParams.viewProjectionMatrix * actorParams.modelMatrix * float4(vertices[vid].position.xyz, 1.0f));
    return out;
}

fragment half4 process_opaque_fragment(
    ColorInOut in [[stage_in]], 
    device const ActorParams &actorParams [[buffer(AAPLBufferIndexActorParams)]]
) {
    half4 out;
    out = half4(actorParams.color);
    return out;
}
}  // namespace tile
